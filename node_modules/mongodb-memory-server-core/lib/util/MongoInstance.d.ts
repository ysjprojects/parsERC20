/// <reference types="node" />
import { ChildProcess, SpawnOptions } from 'child_process';
import { MongoBinaryOpts } from './MongoBinary';
import { ManagerBase } from './utils';
import { EventEmitter } from 'events';
export declare type StorageEngine = 'devnull' | 'ephemeralForTest' | 'mmapv1' | 'wiredTiger';
export interface MongoMemoryInstanceOptsBase {
    args?: string[];
    port?: number;
    dbPath?: string;
    storageEngine?: StorageEngine;
}
export interface MongoMemoryInstanceOpts extends MongoMemoryInstanceOptsBase {
    auth?: boolean;
    dbName?: string;
    /**
     * for binding to all IP addresses set it to `::,0.0.0.0`, by default '127.0.0.1'
     */
    ip?: string;
    replSet?: string;
    storageEngine?: StorageEngine;
}
export declare enum MongoInstanceEvents {
    instanceReplState = "instanceReplState",
    instancePrimary = "instancePrimary",
    instanceReady = "instanceReady",
    instanceSTDOUT = "instanceSTDOUT",
    instanceSTDERR = "instanceSTDERR",
    instanceClosed = "instanceClosed",
    /** Only Raw Error (emitted by mongodProcess) */
    instanceRawError = "instanceRawError",
    /** Raw Errors and Custom Errors */
    instanceError = "instanceError",
    killerLaunched = "killerLaunched",
    instanceLaunched = "instanceLaunched",
    instanceStarted = "instanceStarted"
}
export interface MongodOpts {
    /** instance options */
    instance: MongoMemoryInstanceOpts;
    /** mongo binary options */
    binary: MongoBinaryOpts;
    /** child process spawn options */
    spawn: SpawnOptions;
}
export interface MongoInstance extends EventEmitter {
    emit(event: MongoInstanceEvents, ...args: any[]): boolean;
    on(event: MongoInstanceEvents, listener: (...args: any[]) => void): this;
    once(event: MongoInstanceEvents, listener: (...args: any[]) => void): this;
}
/**
 * MongoDB Instance Handler Class
 * This Class starts & stops the "mongod" process directly and handles stdout, sterr and close events
 */
export declare class MongoInstance extends EventEmitter implements ManagerBase {
    instanceOpts: MongoMemoryInstanceOpts;
    readonly binaryOpts: Readonly<MongoBinaryOpts>;
    readonly spawnOpts: Readonly<SpawnOptions>;
    /**
     * The "mongod" Process reference
     */
    mongodProcess?: ChildProcess;
    /**
     * The "mongo_killer" Process reference
     */
    killerProcess?: ChildProcess;
    /**
     * This boolean is "true" if the instance is elected to be PRIMARY
     */
    isInstancePrimary: boolean;
    /**
     * This boolean is "true" if the instance is successfully started
     */
    isInstanceReady: boolean;
    /**
     * This boolean is "true" if the instance is part of an replset
     */
    isReplSet: boolean;
    constructor(opts: Partial<MongodOpts>);
    /**
     * Debug-log with template applied
     * @param msg The Message to log
     */
    protected debug(msg: string): void;
    /**
     * Create an new instance an call method "start"
     * @param opts Options passed to the new instance
     */
    static create(opts: Partial<MongodOpts>): Promise<MongoInstance>;
    /**
     * Create an array of arguments for the mongod instance
     */
    prepareCommandArgs(): string[];
    /**
     * Create the mongod process
     * @fires MongoInstance#instanceStarted
     */
    start(): Promise<void>;
    /**
     * Shutdown all related processes (Mongod Instance & Killer Process)
     */
    stop(): Promise<boolean>;
    /**
     * Actually launch mongod
     * @param mongoBin The binary to run
     * @fires MongoInstance#instanceLaunched
     */
    _launchMongod(mongoBin: string): ChildProcess;
    /**
     * Spawn an seperate process to kill the parent and the mongod instance to ensure "mongod" gets stopped in any case
     * @param parentPid Parent nodejs process
     * @param childPid Mongod process to kill
     * @fires MongoInstance#killerLaunched
     */
    _launchKiller(parentPid: number, childPid: number): ChildProcess;
    /**
     * Event "error" handler
     * @param err The Error to handle
     * @fires MongoInstance#instanceRawError
     * @fires MongoInstance#instanceError
     */
    errorHandler(err: string): void;
    /**
     * Write the CLOSE event to the debug function
     * @param code The Exit code to handle
     * @fires MongoInstance#instanceClosed
     */
    closeHandler(code: number): void;
    /**
     * Write STDERR to debug function
     * @param message The STDERR line to write
     * @fires MongoInstance#instanceSTDERR
     */
    stderrHandler(message: string | Buffer): void;
    /**
     * Write STDOUT to debug function and process some special messages
     * @param message The STDOUT line to write/parse
     * @fires MongoInstance#instanceSTDOUT
     * @fires MongoInstance#instanceReady
     * @fires MongoInstance#instanceError
     * @fires MongoInstance#instancePrimary
     * @fires MongoInstance#instanceReplState
     */
    stdoutHandler(message: string | Buffer): void;
}
export default MongoInstance;
//# sourceMappingURL=MongoInstance.d.ts.map